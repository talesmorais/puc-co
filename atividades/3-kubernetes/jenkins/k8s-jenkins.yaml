apiVersion: v1
kind: ServiceAccount
metadata:
  name: jenkins
  namespace: prod-infra

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: jenkins
rules:
- apiGroups: ["*"]
  resources: ["*"]
  verbs: ["*"]

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: jenkins
subjects:
- kind: ServiceAccount
  name: jenkins
  namespace: prod-infra
roleRef:
  kind: ClusterRole
  name: jenkins
  apiGroup: rbac.authorization.k8s.io

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: jenkins-master
  namespace: prod-infra
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jenkins-master
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: jenkins-master
    spec:
      terminationGracePeriodSeconds: 0
      serviceAccountName: jenkins
      volumes:
        - name: docker-socket
          hostPath:
            path: "/var/run/docker.sock"
        - name: docker-dir
          hostPath:
            path: "/var/lib/docker"
      containers:
        - name: jenkins-master
          image: 839567250984.dkr.ecr.us-east-1.amazonaws.com/jenkins-master
          imagePullPolicy: Always
          securityContext:
            privileged: true
          ports:
            - name: http
              containerPort: 8080
            - name: jnlp
              containerPort: 50000
          livenessProbe:
            tcpSocket:
              port: 8080
            initialDelaySeconds: 45
            successThreshold: 1
            failureThreshold: 3
            timeoutSeconds: 5
            periodSeconds: 10
          readinessProbe:
            tcpSocket:
              port: 8080
            initialDelaySeconds: 45
            successThreshold: 1
            failureThreshold: 3
            timeoutSeconds: 5
            periodSeconds: 10
          resources:
            requests:
              cpu: "300m"
              memory: "500Mi"
            limits:
              cpu: "1000m"
              memory: "2Gi"
          volumeMounts:
            - mountPath: /var/run/docker.sock
              name: docker-socket
              readOnly: false
            - mountPath: "/var/lib/docker"
              name: docker-dir
              readOnly: false

---

apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: jenkins-master
  namespace: prod-infra
spec:
  maxReplicas: 1
  metrics:
  - resource:
      name: cpu
      target:
        averageUtilization: 99
        type: Utilization
    type: Resource
  scaleTargetRef:
    apiVersion: apps/v1beta2
    kind: Deployment
    name: jenkins-master

---

apiVersion: v1
kind: Service
metadata:
  name: jenkins-master
  namespace: prod-infra
spec:
  type: ClusterIP
  selector: 
    app: jenkins-master
  ports:
    - name: http
      targetPort: 8080
      port: 8080
    - name: jnlp
      port: 50000

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: jenkins-master
  namespace: prod-infra
  annotations:
    alb.ingress.kubernetes.io/actions.ssl-redirect: '{"Type": "redirect", "RedirectConfig": { "Protocol": "HTTPS", "Port": "443", "StatusCode": "HTTP_301"}}'
    alb.ingress.kubernetes.io/group.name: ingress-prod-infra
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
    alb.ingress.kubernetes.io/target-type: ip
spec:
  ingressClassName: alb
  rules:
    - host: jenkins.orbia.net.co
      http:
        paths:
          - pathType: Prefix
            path: /
            backend:
              service:
                name: jenkins-master
                port:
                  number: 8080
  tls:
  - hosts:
    - jenkins.orbia.net.co
